DEBUGINFO
DEBUGINFO: ex=solarposition A=Tuple{Array{Float64,1},Float64,Float64,Float64,Float64,Float64}
DEBUGINFO: invoke MethodInstance MethodInstance for solartime(::Float64, ::Float64, ::Float64, ::Float64)
DEBUGINFO: ex=solartime A=NTuple{4,Float64}
DEBUGINFO: call Type Float64
DEBUGINFO: call Type Float64
DEBUGINFO: call Type Float64
SSA:
%1: f32.convert_s/i32 (i32.const 80)
%2: f32.sub (local.get $J) %1
%3: f32.mul (f32.const 12.566370614359172) %2
%4: f32.div %3 (f32.const 373.0)
%5: call $sin %4
%6: f32.mul (f32.const 0.17) %5
%7: f32.add (local.get $ts) %6
%8: f32.convert_s/i32 (i32.const 8)
%9: f32.sub (local.get $J) %8
%10: f32.mul (f32.const 6.283185307179586) %9
%11: f32.div %10 (f32.const 355.0)
%12: call $sin %11
%13: f32.mul (f32.const 0.129) %12
%14: f32.sub %7 %13
%15: f32.sub (local.get $SM) (local.get $L)
%16: f32.convert_s/i32 (i32.const 12)
%17: f32.mul %16 %15
%18: f32.div %17 (f32.const 3.141592653589793)
%19: f32.add %14 %18
%20: %19
DEBUGINFO: invoke GlobalRef Main.example.solartime
DEBUGINFO: call Type Float64
DEBUGINFO: invoke MethodInstance MethodInstance for solarzenith(::Float64, ::Float64, ::Float64)
DEBUGINFO: ex=solarzenith A=Tuple{Float64,Float64,Float64}
SSA:
%1: call $sin (local.get $l)
%2: call $sin (local.get $d)
%3: f32.mul %1 %2
%4: call $cos (local.get $l)
%5: call $cos (local.get $d)
%6: f32.mul (f32.const 3.141592653589793) (local.get $t)
%7: f32.div %6 (f32.const 12.0)
%8: call $cos %7
%9: f32.mul %4 %5
%10: f32.mul %9 %8
%11: f32.sub %3 %10
%12: call $asin %11
%13: f32.sub (f32.const 1.5707963267948966) %12
%14: %13
DEBUGINFO: invoke GlobalRef Main.example.solarzenith
DEBUGINFO: invoke MethodInstance MethodInstance for solarazimuth(::Float64, ::Float64, ::Float64)
DEBUGINFO: ex=solarazimuth A=Tuple{Float64,Float64,Float64}
SSA:
%1: call $cos (local.get $d)
%2: f32.neg %1
%3: f32.mul (f32.const 3.141592653589793) (local.get $t)
%4: f32.div %3 (f32.const 12.0)
%5: call $sin %4
%6: f32.mul %2 %5
%7: call $cos (local.get $l)
%8: call $sin (local.get $d)
%9: f32.mul %7 %8
%10: call $sin (local.get $l)
%11: call $cos (local.get $d)
%12: f32.mul (f32.const 3.141592653589793) (local.get $t)
%13: f32.div %12 (f32.const 12.0)
%14: call $cos %13
%15: f32.mul %10 %11
%16: f32.mul %15 %14
%17: f32.sub %9 %16
%18: f32.div %6 %17
%19: call $atan %18
%20: %19
DEBUGINFO: invoke GlobalRef Main.example.solarazimuth
DEBUGINFO: return GlobalRef Main.example.nothing
SSA:
%1: call $solartime (local.get $J) (local.get $ts) (local.get $SM) (local.get $L)
%2: f32.convert_s/i32 (i32.const 81)
%3: f32.sub (local.get $J) %2
%4: f32.mul (f32.const 6.283185307179586) %3
%5: f32.div %4 (f32.const 368.0)
%6: call $sin %5
%7: f32.mul (f32.const 0.4093) %6
%8: call $solarzenith %1 %7 (local.get $l)
%9: f32.store (i32.add (local.get $v) (i32.const 4)) %8
%10: call $solarazimuth %1 %7 (local.get $l)
%11: f32.store (i32.add (local.get $v) (i32.const 8)) %10
%12: f32.load (i32.add (local.get $v) (i32.const 4))
%13: call $consolelog %12
%14: f32.load (i32.add (local.get $v) (i32.const 8))
%15: call $consolelog %14
%16: 
